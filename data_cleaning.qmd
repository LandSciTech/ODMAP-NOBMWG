---
title: "data_cleaning"
format: html
editor: visual
---

```{r}
library(shiny)
library(dplyr) # For data manipulation

# --- Data Structure ---
# Define your main items and their corresponding sub-items
# Added "Desserts" with no sub-items to demonstrate the "no sub-items" message
main_items_data <- read.csv("./datasets_solutions/data_cleaning.csv")

# --- UI (User Interface) ---
ui <- fluidPage(
  titlePanel("Select methods for data cleaning"),

  sidebarLayout(
    sidebarPanel(
      selectInput(
        inputId = "main_item_select",
        label = "Select Main Item:",
        choices = names(main_items_data),
        selected = names(main_items_data)[1] # Default selection
      ),
      hr(), # Horizontal line for separation

      # Placeholder for dynamically generated sub-item checkboxes and comment boxes
      uiOutput("sub_item_selection_ui"),
      hr(),

      actionButton("summarize_button", "Summarize Selections")
    ),

    mainPanel(
      h3("Summary of Selections:"),
      tableOutput("summary_table")
    )
  )
)

# --- Server Logic ---
server <- function(input, output, session) {

  # Reactive value to store selected sub-items and their comments
  # This will be a data frame: | main_item | sub_item | comment |
  selected_items_df <- reactiveVal(
    data.frame(
      MainItem = character(),
      SubItem = character(),
      Comment = character(),
      stringsAsFactors = FALSE
    )
  )

  # Render UI for sub-item selection and comments dynamically
  output$sub_item_selection_ui <- renderUI({
    req(input$main_item_select) # Ensure a main item is selected

    current_main_item <- input$main_item_select
    sub_items <- main_items_data[[current_main_item]]

    if (length(sub_items) > 0) {
      # Create a list of UI elements for each sub-item: checkbox + textInput
      lapply(sub_items, function(sub_item) {
        div(
          checkboxInput(
            inputId = paste0("checkbox_", gsub(" ", "_", sub_item)), # Unique ID for checkbox
            label = sub_item,
            value = FALSE # Default unchecked
          ),
          conditionalPanel(
            condition = paste0("input.checkbox_", gsub(" ", "_", sub_item), " == true"), # Only show comment if checkbox is checked
            textInput(
              inputId = paste0("comment_", gsub(" ", "_", sub_item)), # Unique ID for comment
              label = paste("Comment on:"),
              placeholder = "Enter your comment here"
            )
          ),
          hr() # Separator for each sub-item block
        )
      })
    } else {
      # Display a message if there are no sub-items for the selected main item
      p(paste("No sub-items available for", current_main_item, "."))
    }
  })


  # Observe the "Summarize Selections" button click
  observeEvent(input$summarize_button, {
    current_main_item <- input$main_item_select
    sub_items <- main_items_data[[current_main_item]]

    # Only process if there are sub-items for the current main item
    if (length(sub_items) > 0) {
      # Initialize an empty data frame for the current selections
      current_selections <- data.frame(
        MainItem = character(),
        SubItem = character(),
        Comment = character(),
        stringsAsFactors = FALSE
      )

      for (sub_item in sub_items) {
        checkbox_id <- paste0("checkbox_", gsub(" ", "_", sub_item))
        comment_id <- paste0("comment_", gsub(" ", "_", sub_item))

        if (input[[checkbox_id]]) { # Check if the sub-item is selected
          comment_text <- input[[comment_id]] %||% "" # Get comment, default to empty string if NULL

          # Add the selected item and its comment to current_selections
          current_selections <- rbind(
            current_selections,
            data.frame(
              MainItem = current_main_item,
              SubItem = sub_item,
              Comment = comment_text,
              stringsAsFactors = FALSE
            )
          )
        }
      }

      # Append current selections to the overall selected_items_df
      # We'll clear previous selections for the *current* main item
      # to avoid duplicates if the user re-summarizes.
      existing_data <- selected_items_df()
      updated_data <- existing_data %>%
        filter(MainItem != current_main_item) %>% # Remove previous entries for this main item
        rbind(current_selections)

      selected_items_df(updated_data) # Update the reactive value
    } else {
      # If no sub-items, ensure no empty rows are added for this main item
      existing_data <- selected_items_df()
      updated_data <- existing_data %>%
        filter(MainItem != current_main_item) # Just remove any previous entries for this main item
      selected_items_df(updated_data)
    }
  })

  # Render the summary table
  output$summary_table <- renderTable({
    if (nrow(selected_items_df()) == 0) {
      return(data.frame(Message = "No items selected yet. Please make selections and click 'Summarize Selections'."))
    } else {
      return(selected_items_df())
    }
  })
}

# Run the application
shinyApp(ui = ui, server = server)
```
